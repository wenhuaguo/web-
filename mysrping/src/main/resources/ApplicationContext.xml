<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       ">

    <!--基于注解的Bean管理-->
    <context:component-scan base-package="com.kaishengit"/>
    <!--基于注解的AOP也就是动态代理模式自动的创建代理对象方法的增强可以加入代码通知-->
    <!--<aop:aspectj-autoproxy/>-->
    <!--读取配置文件中的数据连接配置-->
    <context:property-placeholder location="classpath:config.properties"/>
    <!--配置数据源（数据库连接池）
    最好写上数据库连接池的销毁方法也就spring容器关闭时将数据库连接池关闭
    -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <!--实际上是set注入直接写属性
        类似el表达式从配置文件中获取数据
        -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--jdbcTemplate
    模板
    -->
    <!--<bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!--jdbc的事务管理器-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--使用注解方式的事务声明-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->
    <!--mybatis在spring中的配置相当于mybatis.XML的配置
        MyBatis SqlSessionFactory在spring中配置默认是单例模式
    -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--配置数据源需要数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--别名类所在的包-->
        <property name="typeAliasesPackage" value="com.kaishengit.pojo"/>
        <!--mapper文件所在的位置-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!--其它配置-->
        <property name="configuration">
            <!--Bean class管理方式意味着该类只能在当前类中注入不能再其它类中注入-->
            <bean class="org.apache.ibatis.session.Configuration">
                <!--表中_开启驼峰命名法-->
                <property name="mapUnderscoreToCamelCase" value="true"/>
            </bean>
        </property>
    </bean>

    <!--mapper自动扫描将扫描到的接口，会自动创建接口的实现类对象并放到spring容器中进行管理-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.kaishengit.mapper"/>
    </bean>
    <!--<bean id="userDaoImpl" class="com.kaishengit.dao.impl.UserDaoImpl"/>-->
    <!--<bean id="userService" class="com.kaishengit.service.impl.UserServiceImpl">-->
        <!--<property name="userDao" ref="userDaoImpl"/>-->
    <!--</bean>-->
    <!--将通知类也交给Bean管理-->
    <!--<bean id="myAspect" class="com.kaishengit.aop.MyAspect"/>-->
    <!--aop的配置-->
    <!--<aop:config>-->
        <!--
        ref引用通知类
        -->
        <!--<aop:aspect ref="myAspect">-->
            <!--切入点：切入点表达式
            第一个*表示返回的参数代表无所谓
            ..表示包及其子包
            第二个*表示类无所谓
            .表示类下面的方法
            *表示方法无所谓
            ..表示参数列表
            -->

            <!--<aop:pointcut id="pointcut" expression="execution(* com.kaishengit.service..*.*(..))"/>-->
            <!--<aop:around method="aroundAdvice" pointcut-ref="pointcut"/>-->
            <!--&lt;!&ndash;前置通知的织入&ndash;&gt;-->
            <!--<aop:before method="beforeAdvice" pointcut-ref="pointcut" />-->
            <!--&lt;!&ndash;后置通知的织入可以有返回参数&ndash;&gt;-->
            <!--<aop:after-returning method="afterAdvice" pointcut-ref="pointcut" returning="result"/>-->
            <!--&lt;!&ndash;异常通知的织入可以有返回参数&ndash;&gt;-->
            <!--<aop:after-throwing method="exceptionAdvice" pointcut-ref="pointcut" throwing="ex"/>-->
            <!--&lt;!&ndash;最终终止的织入&ndash;&gt;-->
            <!--<aop:after method="finallyAdvice" pointcut-ref="pointcut"/>-->
        <!--</aop:aspect>-->
    <!--</aop:config>-->


    <!--
    将Bean放入spring容器中
    .id容器内唯一标示不能重复，
    .class被bean管理的类的完全限定名
    .放入到spring中的Bean默认都是单例模式scope = "singleton",
    scope = "prototype"每次创建出的对象都是不同的对象实例
    .Bean的对象默(模式必须是单例)认会在spring容器启动时创建，
    .如果Bean的属性scope="prototype"那么Bean对象实例会在条用getBean()时创建
    .Bean的scope属性是单例但是不希望在容器启动时创建将lazy-init属性设置为true默认是false对象会在调用时创建
    -->
    <!--<bean id="userDaoImpl" class="com.kaishengit.dao.impl.UserDaoImpl"/>-->
    <!--
        .在配置文件中谁需要谁就将谁注入进去注入的形式有set注入name属性的值必须和set方法的名字相同首字母小写

    -->
    <!--自动注入-->
    <!--<bean id="userService" class="com.kaishengit.service.impl.UserServiceImpl" autowire="byName"/>-->


        <!--构造方法的注入是
            .name属性的值是构造方法的参数名，引用ref的Bean是配置文件的id名
            .通过参数下标引入，但是不明确定不知道对应哪个参数不过可以达到同样的效果
            .type参数类型通过构造函数参数，不过如果是多个参数就不能表达出来了
            .最佳实践还是通过构造函数参数名和引用来进行构造函数注入
            .交给Bean管理的Bean必须有一个无参数的构造方法因为spring创建出类的对象的时候
            是通过Java的反射机制将类的实例创建出来如果类没有无参数的构造方法反射机制将不能够
            创建出来对象，但如果没有无参数的构造方法必须告诉spring构造函数的参数是什么类型
        -->
        <!--<constructor-arg type="com.kaishengit.dao.UserDao" ref="userDaoImpl"/>-->
        <!--<constructor-arg index="0" ref="userDaoImpl"/>-->
        <!--<constructor-arg name="userDao" ref="userDaoImpl"/>-->
        <!--另外几种注入方式，可以达到同样的效果但不是最佳方式ref引用Bean的id属性以及bean节点的类的完全限定名
        类完全限定名创建出来的对象是两个因为spring容器认为这是两个不同的引用，类的完全限定的引用只有是该类是为了注入而产生的
        除了引用本身，其它Bean是不可以使用的该注入的局限性比较大最佳注入方式就是属性的注入指定name和引用的Bean的id名
        -->
        <!--<property name="userDao">-->
            <!--<bean class="com.kaishengit.dao.impl.UserDaoImpl"/>-->
        <!--</property>-->
        <!--基本数据类型及集合的注入-->
        <!--<property name="name" value="张三"/>-->
        <!--<property name="age" value="10"/>-->
        <!--<property name="list">-->
            <!--<list>-->
                <!--<value>jack</value>-->
                <!--<value>rose</value>-->
                <!--<value>merry</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="map">-->
            <!--<map>-->
                <!--<entry key="k1"  value="k1"/>-->
                <!--<entry key="k2" value="k2"/>-->
            <!--</map>-->
        <!--</property>-->
        <!--<property name="num">-->
            <!--<set>-->
                <!--<value>34.5</value>-->
                <!--<value>50.1</value>-->
            <!--</set>-->
        <!--</property>-->
        <!--<property name="properties">-->
            <!--<props>-->
                <!--<prop key="a1">1</prop>-->
                <!--<prop key="a2">2</prop>-->
            <!--</props>-->
        <!--</property>-->
        <!--<property name="userDao">-->
            <!--<ref bean="userDaoImpl"/>-->
        <!--</property>-->
        <!--<property name="userDao" ref="userDaoImpl"/>-->

</beans>